extern fun FileOpen(str filename, num mode) > num;
extern fun FileClose(num fd) > void;
extern fun FileReadAll(num fd) > str;
extern fun FileReadLine(num fd) > str?;
extern fun FileRead(num fd, num n) > str?;
extern fun FileWrite(num fd, str bytes) > void;
extern fun getStdIn() > num;
extern fun getStdOut() > num;
extern fun getStdErr() > num;

| IO & FS
enum FileMode {
    read,
    write,
    update,
}

object File {
    num fd,

    | Open file
    static fun open(str filename, FileMode mode) > File {
        return File {
            fd = FileOpen(filename, mode: mode.value),
        };
    }

    | Close file
    fun close() > void {
        FileClose(this.fd);
    }

    | Reads all
    fun readAll() > str {
        return FileReadAll(this.fd);
    }

    | Reads next line, returns null if nothing to read
    fun readLine() > str? {
        return FileReadLine(this.fd);
    }

    | Reads n bytes, returns null if nothing to read
    fun read(num n) > str? {
        return FileRead(this.fd, n: n);
    }

    | Write bytes
    fun write(str bytes) > void {
        FileWrite(this.fd, bytes: bytes);
    }
}

| File opened in read mode
const File stdin = File { fd = getStdIn() };
| File opened in write mode
const File stdout = File { fd = getStdOut() };
| File opened in write mode (do we sometimes read stderr?)
const File stderr = File { fd = getStdErr() };

export FileMode;
export File;
export stdin;
export stdout;
export stderr;