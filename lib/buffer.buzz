import "lib/math" as math;

|| @private
extern fun BufferNew() > ud;
|| @private
extern fun BufferDeinit(ud userdata) > void;
|| @private
extern fun BufferRead(ud userdata, num n) > str?;
|| @private
extern fun BufferWrite(ud userdata, str bytes) > void;
|| @private
extern fun BufferReadBoolean(ud userdata) > bool?;
|| @private
extern fun BufferWriteBoolean(ud userdata, bool b) > void;
|| @private
extern fun BufferWriteNumber(ud userdata, num n) > str;
|| @private
extern fun BufferReadNumber(ud userdata) > num?;
|| @private
extern fun BufferLen(ud userdata) > num;
|| @private
extern fun BufferCursor(ud userdata) > num;
|| @private
extern fun BufferBuffer(ud userdata) > str;
|| @private
extern fun BufferEmpty(ud userdata) > void;

|| Read and write data to a string buffer
object Buffer {
    || @private
    ud buffer,

    || @return A new `Buffer`
    static fun init() > Buffer {
        return Buffer{
            buffer = BufferNew()
        };
    }

    || Frees the buffer
    || TODO: with finalizers we could do this automatically when the object is collected
    fun deinit() > void {
        BufferDeinit(this.buffer);
    }

    || Reads `n` bytes
    || @return Read bytes or `null` if nothing to read
    fun read(num n) > str? {
        return BufferRead(this.buffer, n: n);
    }

    || Writes a string
    || @param bytes Bytes to write
    fun write(str bytes) > void {
        BufferWrite(this.buffer, bytes: bytes);
    }

    || Reads a boolean
    || @return Boolean we read or `null` if nothing to read
    fun readBoolean() > bool? {
        return BufferReadBoolean(this.buffer);
    }

    || Writes a boolean
    || @param boolean Boolean to write
    fun writeBoolean(bool boolean) > void {
        BufferWriteBoolean(this.buffer, b: boolean);
    }

    || Reads a number
    || @return Read number or `null` if nothing to read
    fun readNumber() > num? {
        return BufferReadNumber(this.buffer);
    }

    || Writes a number
    || @param number Number to write
    fun writeNumber(num number) > void {
        BufferWriteNumber(this.buffer, n: number);
    }

    || @return Length of the buffer
    fun len() > num {
        return BufferLen(this.buffer);
    }

    || @return Position of the reading cursor
    fun cursor() > num {
        return BufferCursor(this.buffer);
    }

    || Empties the buffer
    fun empty() > void {
        BufferEmpty(this.buffer);
    }

    | TODO: useless since string coming from zig/c side are \0 terminated
    | fun getBuffer() > str {
    |     return BufferBuffer(this.buffer);
    | }
}

export Buffer;