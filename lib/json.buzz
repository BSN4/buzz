import "lib/std";

object JsonParser {
    str source,
    num offset = 0,

    fun advance() > str? {
        str char = this.source[this.offset];

        this.offset = this.offset + 1;

        return char;
    }

    fun peek() > str? {
        if (this.offset >= this.source.len()) {
            return null;
        }

        this.source[this.offset];
    }

    fun match(str expected) > bool {
        if (this.offset > this.source.len()) {
            return false;
        }

        if (this.source[this.offset] != expected) {
            return false;
        }

        this.offset = this.offset + 1;

        return true;
    }

    fun skipWhitespaces() > void {
        while (true) {
            const str char = this.peek();

            if (char == " " or char == "\r" or char == "\t") {
                this.advance();
            } else {
                return;
            }
        }
    }

    fun next() > Json? {
        this.skipWhitespaces();

        if (this.offset >= this.source.len()) {
            return null;
        }

        const str? char = this.advance();
        if (char == "[") {
            return this.array();
        } else if (char == "\{") {
            return this.map();
        } else if (char.byte(0) >= "0".byte(0) and char.byte(0) <= "9".byte(0)) {
            return Json{ number = this.number() };
        } else if (char == "\"") {
            return Json{ string = this.string() };
        } else if (this.source.sub(this.offset) == "true") {
            return Json{ boolean = true };
        } else if (this.source.sub(this.offset) == "false") {
            return Json{ boolean = false };
        } else if (this.source.sub(this.offset) == "null") {
            return Json{};
        }

        throw "Could not parse JSON: unexpected character at offset {this.offset}";
    }

    fun array() > Json? {
        [Json] array = <Json>[];

        while (true) {
            const Json? element = this.next();

            this.skipWhitespaces();

            if (element != null) {
                array.append(element!);

                if (this.match("]")) {
                    break;
                } else if (!this.match(",")) {
                    throw "Could not parse JSON: expected `,` at offset {this.offset}";
                }
            } else {
                throw "Could not parse JSON: could not parse array element at offset {this.offset}";
            }
        }

        return array;
    }

    fun map() > {str, Json}? {
        {str, Json} map = <str, Json>{};

        while (true) {
            const str? key = this.string();

            if (key == null) {
                throw "Could not parse JSON: expected string at offset {this.offset}";
            }

            const Json? value = this.next();

            if (value == null) {
                throw "Could not parse JSON: could not parse object property value at offset {this.offset}";
            }

            map[key!] = value!;

            if (this.match("}")) {
                break;
            } else if (!this.match(",")) {
                throw "Could not parse JSON: expected `,` at offset {this.offset}";
            }
        }

        return map;
    }

    fun number() > num? {
        str number = this.peek();

        | TODO: this will allow number notation not allowed in JSON
        while (parseNumber(number) != null) {
            str char = this.advance();

            if (char == null) {
                break;
            }

            number = number + char;
        }

        return parseNumber(number);
    }

    fun string() > str {
        str? char = this.advance();
        str string = "";
        
        while (char != null and char != "\"") {
            if (char == "\\" and this.match("\"")) {
                string = string + "\"";
            } else {
                string = string + char;
            }

            char = this.advance();
        }

        return string;
    }
}

object Json {
    str? string = null,
    bool? boolean = null,
    num? number = null,
    {str, Json}? map = null,
    [Json]? list = null,

    fun encode() > str {
        if (this.string != null) {
            return "\"{this.string!}\"";
        } else if (this.boolean != null) {
            return "{this.boolean!}";
        } else if (this.number != null) {
            return "{this.number!}";
        } else if (this.map != null) {
            str json = "\{";
            const num size = this.map!.size();
            num count = 0;
            foreach (str key, Json value in this.map!) {
                json = json + "\"{key}\":{value.encode()}";

                if (count < size - 1) {
                    json = json + ",";
                }

                count = count + 1;
            }
            return json + "}";
        } else if (this.list != null) {
            str json = "[";

            const num len = this.list!.len();
            foreach (num i, Json value in this.list!) {
                json = json + value.encode();

                if (i <= len - 1) {
                    json = json + ",";
                }
            }

            return json + "]";
        } else {
            return "null";
        }
    }

    static fun decode(str json) > Json? {
        return JsonParser{ source = json }.next();
    }
}

| test "Json.encode" {
|     Json json = Json {
|         map = {
|             "hello": Json { string = "world" },
|             "bye": Json { number = 42 },
|         },
|     };

|     assert(json.encode() == "\{\"hello\":\"world\",\"bye\":42}", message: "valid encode");
| }

test "Json.decode" {
    print(Json.decode("[ 12, true, \"hello\" ]")!.list![2]);
}

export Json;