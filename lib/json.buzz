import "lib/std";
import "lib/buffer";
import "lib/errors";

object JsonParseError {
    str? message = null,
}

|| Parse JSON string into a `Json` tree
|| @private
object JsonParser {
    str source,
    num offset = 0,

    fun advance() > str? {
        if (this.offset >= this.source.len()) {
            return null;
        }

        str char = this.source[this.offset];

        this.offset = this.offset + 1;

        return char;
    }

    fun peek() > str? {
        if (this.offset >= this.source.len()) {
            return null;
        }

        return this.source[this.offset];
    }

    fun match(str expected) > bool {
        if (this.offset > this.source.len()) {
            return false;
        }

        if (this.source[this.offset] != expected) {
            return false;
        }

        this.offset = this.offset + 1;

        return true;
    }

    fun consume(str expected) > void !> JsonParseError {
        if (!this.match(expected)) {
            throw JsonParseError{ message = "Could not parse JSON: expected `{expected}` got `{this.peek()}` at offset {this.offset}" };
        }
    }

    fun skipWhitespaces() > void {
        while (true) {
            const str? char = this.peek();

            if (char == " " or char == "\r" or char == "\t") {
                this.advance();
            } else {
                return;
            }
        }
    }

    fun next() > Json !> JsonParseError, WriteWhileReadingError {
        this.skipWhitespaces();

        if (this.offset >= this.source.len()) {
            throw JsonParseError{ message = "Could not parse JSON: end of string" };
        }

        const str char = this.advance() ?? "\00";
        if (char == "[") {
            return Json{ list = this.array() };
        } else if (char == "\{") {
            return Json{ map = this.map() };
        } else if (char.byte(0) >= "0".byte(0) and char.byte(0) <= "9".byte(0)) {
            return Json{ number = this.number(char) };
        } else if (char == "\"") {
            return Json{ string = this.string() };
        } else if (this.source.sub(this.offset - 1, len: 4) == "true") {
            this.offset = this.offset + 3;
            return Json{ boolean = true };
        } else if (this.source.sub(this.offset - 1, len: 5) == "false") {
            this.offset = this.offset + 4;
            return Json{ boolean = false };
        } else if (this.source.sub(this.offset - 1, len: 4) == "null") {
            this.offset = this.offset + 3;
            return Json{};
        }

        throw JsonParseError{ message = "Could not parse JSON: unexpected character `{char}` at offset {this.offset}" };
    }

    fun array() > [Json] !> JsonParseError, WriteWhileReadingError {
        [Json] array = [<Json>];

        while (true) {
            this.skipWhitespaces();

            if (this.match("]")) {
                break;
            }
                
            array.append(this.next());

            this.skipWhitespaces();

            if (this.match("]")) {
                break;
            } 

            this.consume(",");
        }

        return array;
    }

    fun map() > {str, Json} !> JsonParseError, WriteWhileReadingError {
        {str, Json} map = {<str, Json>};

        while (true) {
            this.skipWhitespaces();

            if (this.match("}")) {
                break;
            }

            this.consume("\"");
            const str key = this.string();

            this.skipWhitespaces();

            this.consume(":");

            this.skipWhitespaces();

            map[key] = this.next();

            this.skipWhitespaces();

            if (this.match("}")) {
                break;
            }

            this.consume(",");
        }

        return map;
    }

    fun number(str parsed) > num !> JsonParseError {
        str number = parsed;

        while (parseNumber(this.peek() ?? "NaN") != null or this.peek() == ".") {
            str? char = this.advance();

            if (char == null) {
                break;
            }

            number = number + char!;
        }

        num? parsed = parseNumber(number);
        
        if (parsed == null) {
            throw JsonParseError{ message = "Could not parse JSON: `{number}` is not a number" };
        }

        return parsed!;
    }

    fun string() > str !> WriteWhileReadingError {
        str? char = this.advance();
        Buffer string = Buffer.init();
        
        while (char != null and char != "\"") {
            if (char == "\\" and this.match("\"")) {
                string.write("\"");
            } else {
                string.write(char!);
            }

            char = this.advance();
        }

        str result = string.getBuffer();

        string.deinit();

        return result;
    }
}

|| Utility object to manage data from a JSON string
object Json {
    || When wrapped data is a string
    str? string = null,
    || When wrapped data is a boolean
    bool? boolean = null,
    || When wrapped data is a number
    num? number = null,
    || When wrapped data is an object, object property values are themselves wrapped in a `Json`
    {str, Json}? map = null,
    || When wrapped data is a list, list elements are themselves warpped in a `Json`
    [Json]? list = null,

    || @return wrapped data string value or empty string if not a string
    fun stringValue() > str -> this.string ?? ""
    || @return wrapped data boolean value or `false` if not a boolean
    fun booleanValue() > bool -> this.boolean ?? false
    || @return wrapped data number value or `0` if not a number
    fun numberValue() > num -> this.number ?? 0
    || @return wrapped data map value or empty map if not a map
    fun mapValue() > {str, Json} -> this.map ?? {<str, Json>}
    || @return wrapped data list value or empty list if not a list
    fun listValue() > [Json] -> this.list ?? [<Json>]

    || Query the json element at `path`, if nothing matches return `Json{}`
    || @param path Path to query
    || @return Found `Json` or `Json{}` (which is `null`)
    fun q([str] path) > Json !> JsonParseError {
        if (this.map != null) {
            if (path.len() > 1) {
                return (this.map![path[0]] ?? Json{}).q(path.sub(1, len: null));
            } else if (path.len() > 0) {
                return this.map![path[0]] ?? Json{};
            } else {
                return this;
            }
        }

        return Json{};
    }

    || Encode to a JSON string
    || @return str the JSON string
    fun encode() > str {
        if (this.string != null) {
            return "\"{this.string!}\"";
        } else if (this.boolean != null) {
            return "{this.boolean!}";
        } else if (this.number != null) {
            return "{this.number!}";
        } else if (this.map != null) {
            str json = "\{";
            const num size = this.map!.size();
            num count = 0;
            foreach (str key, Json value in this.map!) {
                json = json + "\"{key}\":{value.encode()}";

                if (count < size - 1) {
                    json = json + ",";
                }

                count = count + 1;
            }
            return json + "}";
        } else if (this.list != null) {
            str json = "[";

            const num len = this.list!.len();
            foreach (num i, Json value in this.list!) {
                json = json + value.encode();

                if (i < len - 1) {
                    json = json + ",";
                }
            }

            return json + "]";
        }

        return "null";
    }

    || Decode string to a Json instance
    || @param str json The JSON string
    || @return Json
    static fun decode(str json) > Json !> JsonParseError, WriteWhileReadingError {
        return JsonParser{ source = json }.next();
    }
}

export Json;
export JsonParseError;