import "lib/std";
import "lib/math" as math;
import "lib/errors";

object Node {
    Node? left = null,
    Node? right = null,
}

fun bottomUpTree(num depth) > Node {
    if (depth > 0) {
        depth = depth - 1;

        return Node{
            left = bottomUpTree(depth),
            right = bottomUpTree(depth),
        };
    }

    return Node{};
}

fun itemCheck(Node tree) > num {
    if (tree.left != null) {
        return 1 + itemCheck(tree.left!) + itemCheck(tree.right!);
    } else {
        return 1;
    }

    return 0;
}

fun main([str] args) > void !> OverflowError, UnderflowError {
    num N = 0;
    if (args.len() > 0) {
        N = parseNumber(args[0]) ?? 0;
    }

    num mindepth = 4;
    num maxdepth = mindepth + 2;
    if (maxdepth < N) {
        maxdepth = N;
    }

    num stretchdepth = maxdepth + 1;
    Node stretchtree = bottomUpTree(stretchdepth);
    print("stretch tree of depth {stretchdepth},\t check: {itemCheck(stretchtree)}");

    Node longlivedtree = bottomUpTree(maxdepth);
    for (num depth = mindepth; depth < maxdepth; depth = depth + 2) {
        num iterations = math.pow(x: 2, y: maxdepth - depth + mindepth);
        num check = 0;
        for (num i = 0; i < iterations; i = i + 1) {
            check = check + itemCheck(bottomUpTree(depth));
        }

        print("{iterations}\t trees of depth {depth}\t check: {check}");
    }

    print("long lived tree of depth {maxdepth}\t check: {itemCheck(longlivedtree)}");
}