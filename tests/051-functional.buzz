import "lib/std";

test "list.forEach" {
    [int] data = [1, 2, 3, 4];

    int sum = 0;
    data.forEach(fun (int index, int element) > void {
        sum = sum + element;
    });

    assert(sum == 10, message: "could use forEach");
}

test "list.map" {
    [int] data = [1, 2, 3, 4];

    [str] mapped = data.map(<str>, fun (int index, int element) -> "{element}");

    assert(mapped.join(", ") == "1, 2, 3, 4", message: "could use map");
}

test "list.filter" {
    [int] data = [1, 2, 3, 4];

    [int] odd = data.filter(fun (int index, int element) -> element % 2 != 0);

    assert(odd.join(", ") == "1, 3", message: "could use filter");
}

test "list.reduce" {
    [int] data = [1, 2, 3, 4];

    int sum = data.reduce(
        <int>,
        fun (int index, int element, int accumulator) -> accumulator + element,
        initial: 0
    );

    assert(sum == 10, message: "could use reduce");
}