import "lib/std.buzz";

enum(str) MyErrors {
    failed = "Something failed",
    bad = "Something bad",
    ohno = "Oh no!",
}

enum(str) OtherErrors {
    failed = "Something failed",
    bad = "Something bad",
    ohno = "Oh no!",
}

fun willFail() > num {
    throw MyErrors.failed;
    return 1;
}

fun willFailToo() > num {
    throw OtherErrors.failed;
    return 1;
}

fun willFailMore() > num {
    [num] list = <num>[];

    return list[100];
}

fun willIndirectlyFail() > num {
    return willFail();
}

test "Error value in catch clause" {
    try {
        willFail();
    } catch (MyErrors error) {
        assert(error == MyErrors.failed, message: "caught the right error");
    }

    try {
        willFailToo();
    } catch (MyErrors error) {
        assert(false, message: "unreachable");
    } catch (OtherErrors error) {
        assert(error == OtherErrors.failed, message: "caugh the right kind of error");
    }

    try {
        willFailMore();
    } catch (MyErrors error) {
        assert(false, message: "unreachable");
    } catch (OtherErrors error) {
        assert(false, message: "unreachable");
    } catch {
        assert(true, message: "finally caught");
    }

    try {
        willIndirectlyFail();
    } catch (MyErrors error) {
        assert(error == MyErrors.failed, message: "caught indirect error");
    }
}