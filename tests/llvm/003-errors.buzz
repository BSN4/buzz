import "lib/std";

fun fails() > void !> str {
    throw "I failed";
}

fun handle() > void {
    str someLocal = "hello";

    try {
        print("Going about my day...");

        fails();

        assert(false, message: "Error not raised");
    } catch (str msg) {
        print("Caught: `{msg}`");

        assert(true, message: "Caught the right error");
    } catch {
        assert(false, message: "Should not have reached unconditional clause");
    }

    print("Everything went fine in the end");
    assert(someLocal == "hello", message: "Local still there");
    assert(true, message: "Recovered from errors");

    try {
        subTry();
    } catch (str msg) {
        print("Caught bubbled up error: `{msg}`");
        assert(true, message: "Error bubbled up from several try layers");
    }
}

fun subTry() > void !> str {
    try {
        fails();
    } catch (int e) {
        assert(false, message: "Caugh wrong error");
    }
}

test "error handling" {
    handle();
}