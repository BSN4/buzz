import "lib/std.buzz";

enum(str) MyErrors {
    failed = "Something failed",
    bad = "Something bad",
    ohno = "Oh no!",
}

enum(str) OtherErrors {
    failed = "Something failed",
    bad = "Something bad",
    ohno = "Oh no!",
}

fun willFail() > num {
    throw MyErrors.failed;
    return 1;
}

fun willFailToo() > num {
    throw OtherErrors.failed;
    return 1;
}

fun willFailMore() > num {
    [num] list = <num>[];

    return list[100];
}

fun willIndirectlyFail() > num {
    | let error forward to caller
    return willFail();
}

test "Inline catch clauses" {
    | assert((willFail() catch null) == null, message: "error or null");
    assert((willFail() catch 0) == 0, message: "error or default value");

    assert((willFail() catch {
        (MyErrors error) -> 0,
    }) == 0, message: "caught the right error");

    assert((willFailToo() catch {
        (MyErrors error) -> 1,
        (OtherErrors error) -> 0,
    }) == 0, message: "caught the right error");

    assert((willFailMore() catch {
        (MyErrors error) -> 1,
        (OtherErrors error) -> 2,
        default -> 0,
    }) == 0, message: "default catch");

    assert((willIndirectlyFail() catch {
        (MyErrors error) -> 0,
    }) == 0, message: "caught indirect error");
}