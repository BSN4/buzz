import "zig-out/lib/libstd.dylib";

class Form {
    num x,
    num y,

    fun toString() > str {
        return "({this.x}, {this.y})";
    }
}

class Circle < Form {
    num radius,

    fun toString() > str {
        return "center: {super.toString()}, radius: {this.radius}";
    }
}

test "Inheritance & polymorphism" {
    Circle circle = Circle {
        x = 0,
        y = 0,
        radius = 10,
    };

    assert(circle is Circle, message: "of course");
    assert(circle is Form, message: "inheritance baby");
    assert(circle.toString() == "center: (0, 0), radius: 10", message: "polymorphism");
}

test "Downcast" {
    Circle circle = Circle {
        x = 0,
        y = 0,
        radius = 10,
    };

    Form form = circle;

    assert(form.toString() == "center: (0, 0), radius: 10", message: "polymorphism");
}

class Oval < Circle {
    num constraint,

    fun toString() > str {
        return "{super.toString()}, constraint: {this.constraint}";
    }
}

test "More than one level of inheritance" {
    Oval oval = Oval {
        x = 6,
        y = 3,
        radius = 23,
        constraint = 4,
    };

    print(oval.toString());
}