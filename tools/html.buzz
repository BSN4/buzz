import "lib/std";
import "lib/buffer";

object Node {
    str tag,
    {str, str} attributes,
    [Node]? children = null,
    str? textContent = null,

    static fun init(str? tag, {str, str}? attributes, [Node]? children, str? textContent) > Node {
        return Node{
            tag = tag ?? "",
            attributes = attributes ?? {<str, str>},
            children = children,
            textContent = textContent
        };
    }

    fun gen(Buffer out) > void !> WriteWhileReadingError {
        | Empty tag is the text node
        if (this.tag == "") {
            out.write(this.textContent ?? "");

            return;
        }

        out.write("<{this.tag}");

        foreach (str name, str value in this.attributes) {
            out.write(" {name}=\"{value}\"");
        }

        if (this.children -> children) {
            if (children.len() > 0) {
                out.write(">");

                foreach (num i, Node node in children) {
                    node.gen(out);
                }

                out.write("</{this.tag}>");

                return;
            }
        }

        out.write("/>");
    }
}

fun br({str, str}? attributes) > Node
    -> Node.init(tag: "br", attributes: attributes);

fun div({str, str}? attributes, [Node]? children, str? textContent) > Node
    -> Node.init(tag: "div", attributes: attributes, children: children, textContent: textContent);

fun text(str content) > Node
    -> Node.init(tag: "", textContent: content);

| etc.

export Node;
export text;
export div;
export br;

test "html" {
    Buffer out = Buffer.init();
    text("hello world").gen(out);

    assert(out.toString() == "hello world", message: "text node");

    out.deinit();

    out = Buffer.init();
    div(
        children: [
            text("hello world"),
            br(),
        ],
        attributes: {
            "data-id": "012bfef"
        },
    ).gen(out);

    assert(
        out.toString() == "<div data-id=\"012bfef\">hello world<br/></div>",
        message: "Could gen simple html"
    );

    out.deinit();
}