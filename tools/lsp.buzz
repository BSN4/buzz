import "lib/std";
import "lib/io";
import "lib/json";
import "lib/os" as os;
import "lib/debug" as debug;

object LspState {
    | TODO: Maybe bad to keep this in memory
    {str, str} sources = <str, str>{},
    {str, Json} ast = <str, Json>{},
}

fun readContentLength() > num? {
    while (true) {
        str? header = stdin.readLine();

        if (header == null) {
            throw "Could not parse request header";
        }

        | Consume \r\n
        stdin.read(2);
        | Strip \r
        header = header!.sub(0, len: header!.len() - 1);
        const num? colon = header!.indexOf(": ");
        
        if (colon == null) {
            throw "Could not parse request header";
        }

        const str name = header!.sub(0, len: colon!);
        const str value = header!.sub(colon! + 2, len: null);
        
        if (name == "Content-Length") {
            return parseNumber(value);
        }
    }

    return null;
}

fun respond(str? strId, num? numId, Json result) > void {
    const Json response = Json{
        map = {
            "jsonrpc": Json{ string = "2.0" },
            "id": Json{ string = strId, number = numId },
            "result": result
        }
    };

    const str stringResponse = response.encode();

    stderr.write("Content-Length: {stringResponse.len()}\r\n\r\n{stringResponse}");
    stdout.write("Content-Length: {stringResponse.len()}\r\n\r\n{stringResponse}");
}

fun toOffset(str source, num line, num column) > num {
    [str] lines = source.split("\n");
    num offset = 0;

    | Advance offset to start of line
    for (num i = 0; i < line - 1 and i < lines.len(); i = i + 1) {
        offset = offset + lines[i].len() + 1; | +1 for the \n char
    }

    return offset + column;
}

fun toTokenStart(str source, num offset) > num {
    | Tokenize source, and find out the start of the token under `offset`
    
    return offset;
}

const {str, Function(LspState state, {str, Json} request) > Json} handlers = {
    "exit": fun (LspState state, {str, Json} request) > Json{
        os.exit(0);

        return Json{};
    },
    "initialize": fun (LspState state, {str, Json} request) > Json
        -> Json{
            map = {
                "capabilities": Json{
                    map = {
                        "declarationProvider": Json{ boolean = true },
                        "definitionProvider": Json{ boolean = true },
                    }
                },
                "serverInfo": Json{
                    map = {
                        "name": Json{ string = "buzz-lsp" },
                        "version": Json{ string= "0.0.1" },
                    },
                },
            },
        },
    "textDocument/definition": fun (LspState state, {str, Json} request) > Json {
        const {str, Json} textDocument = request["params"]?.mapValue()["textDocument"]?.mapValue() ?? <str, Json>{};
        str uri = textDocument["uri"]?.stringValue() ?? "";
        const {str, Json} position = textDocument["position"]?.mapValue() ?? <str, Json>{};
        const num line = position["line"]?.numberValue() ?? 0;
        const num column = position["column"]?.numberValue() ?? 0;

        if (!uri.startsWith("file://")) {
            stderr.write("Could not handle uri: {uri}\n");
            return Json{};    
        }

        | Dismiss "file://" prefix
        uri = uri.sub(7, len: null);

        str? source = state.sources[uri];
        if (source == null) {
            File file = File.open(uri, mode: FileMode.read);

            source = file.readAll();
            state.sources[uri] = source!;

            file.close();
        }

        num position = toOffset(source!, line: line, column: column);
        num tokenPosition = toTokenStart(source!, offset: position);
        Json? ast = state.ast[uri] ?? Json.decode(debug.ast(source!, scriptName: uri));

        | Explore ast...
        stderr.write(ast?.encode() ?? "nothing");

        return Json{};
    }
};

fun main([str] args) > void {
    LspState state = LspState{};

    while (true) {
        num? contentLength = readContentLength();

        if (contentLength == null or contentLength! <= 0) {
            throw "Request is empty";
        }

        str? requestRaw = stdin.read(contentLength ?? 0);

        stderr.write("Request is: `{requestRaw!}`\n");

        if (requestRaw == null) {
            throw "Could not read request";
        }

        {str, Json} request = Json.decode(requestRaw!).mapValue();
        const str? method = request["method"]?.string;

        stderr.write("Method is: `{method ?? "none"}`\n");

        Json result = Json{};
        if (method != null and handlers[method!] != null) {
            result = handlers[method!]!(state, request: request);
        }

        respond(
            strId: request["id"]?.string,
            numId: request["id"]?.number,
            result: result,
        );
    }
}