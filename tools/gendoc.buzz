import "lib/std";
import "lib/debug";
import "lib/json";
import "lib/io";
import "tools/html";

enum(str) GenDocError {
    parse = "Could not parse buzz script",
}

object Declaration {
    str declarationType,
    str typeDef,
    str? docblock,

    [Declaration] subDeclarations = <Declaration>[],

    fun gen() > Node {
        print("current {this.declarationType} {this.typeDef}");

        Node root = Node{
            tag = "div",
            children = [
                Node{
                    tag = "h2",
                    children = [
                        text(this.typeDef),
                    ]
                },
                Node{
                    tag = "p",
                    children = [
                        text(this.docblock ?? "Undocumented"),
                    ]
                }
            ]
        };

        foreach (num index, Declaration decl in this.subDeclarations) {
            root.children!.append(decl.gen());
        }

        return root;
    }
}

fun extractDeclarations([Json] statements) > [Declaration] {
    [Declaration] declarations = <Declaration>[];

    foreach (num index, Json statement in statements) {
        {str, Json} statementMap = statement.mapValue();
        str nodeType = statementMap["node"]?.stringValue() ?? "unknown";

        if (
            nodeType == "Function"
            or nodeType == "VarDeclaration"
            or nodeType == "FunDeclaration"
            or nodeType == "Enum"
            or nodeType == "ObjectDeclaration"
        ) {
            Declaration declaration = Declaration{
                declarationType = nodeType,
                typeDef = statementMap["type_def"]?.stringValue() ?? "unknown",
                docblock = statementMap["docblock"]?.string,
            };

            if (nodeType == "ObjectDeclaration") {
                {str, Json} props = statementMap["members"]?.mapValue() ?? <str, Json>{};
                foreach (str name, Json member in props) {
                    declaration.subDeclarations.append(
                        Declaration{
                            declarationType = "member",
                            typeDef = member.mapValue()["type_def"]?.stringValue() ?? "unknown",
                            docblock = member.mapValue()["docblock"]?.string,
                        }
                    );
                }
            }

            declarations.append(declaration);
        }
    }

    return declarations;
}

fun gendoc(str path) > void {
    File file = File.open(path, mode: FileMode.read);

    str source = ast(file.readAll());
    file.close();

    {str, Json} root = Json.decode(source).mapValue();

    | Root must be a function
    assert(root["node"]?.string == "Function", message: "Expected root node to be a function");

    [Declaration] declarations = extractDeclarations(root["body"]?.mapValue()["statements"]?.listValue() ?? <Json>[]);

    foreach (num i, Declaration decl in declarations) {
        print(decl.gen().gen());
    }
}

fun main([str] args) > void {
    if (args.len() != 1) {
        print("Expected entry point buzz script");
    }

    gendoc(args[0]);
}