import "lib/std";
import "lib/debug";
import "lib/json";
import "lib/io";
import "lib/fs";
import "tools/html";

object Declaration {
    str declarationType,
    str? name = null,
    str typeDef,
    str? docblock,

    {str, Declaration} subDeclarations,

    static fun init(str declarationType, str typeDef, str? docblock, {str, Declaration}? subDeclarations) > Declaration {
        return Declaration{
            declarationType = declarationType,
            typeDef = typeDef,
            docblock = docblock,
            subDeclarations = subDeclarations ?? <str, Declaration>{},
        };
    }

    fun toMarkdown() > str {
        str out = "\n## `{this.name ?? ""} {this.typeDef}`\n"
            + "{this.docblock ?? "Undocumented"}";

        foreach (str key, Declaration decl in this.subDeclarations) {
            out = "{out}\n{decl.toMarkdown()}";
        }

        return out;
    }

    fun toNode() > Node {
        Node root = Node.init(
            "div",
            attributes: {
                "class": "decl",
            },
            children: [
                Node.init(
                    "h2",
                    children: [
                        text("{this.name ?? ""} {this.typeDef}"),
                    ],
                ),
                Node.init(
                    "p",
                    children: [
                        text(this.docblock ?? "Undocumented"),
                    ]
                )
            ]
        );

        foreach (str key, Declaration decl in this.subDeclarations) {
            root.children!.append(decl.toNode());
        }

        return root;
    }

    fun gen() > str -> this.toNode().gen()
}

fun extractDeclarations([Json] statements) > [Declaration] {
    [Declaration] declarations = <Declaration>[];

    foreach (num index, Json statement in statements) {
        {str, Json} statementMap = statement.mapValue();
        str nodeType = statementMap["node"]?.stringValue() ?? "unknown";

        if (
            nodeType == "Function"
            or nodeType == "VarDeclaration"
            or nodeType == "FunDeclaration"
            or nodeType == "Enum"
            or nodeType == "ObjectDeclaration"
        ) {
            Declaration declaration = Declaration.init(
                declarationType: nodeType,
                typeDef: statementMap["type_def"]?.stringValue() ?? "unknown",
                docblock: statementMap["docblock"]?.string,
            );

            if (nodeType == "VarDeclaration") {
                declaration.name = statementMap["name"]?.string;
            }

            if (nodeType == "ObjectDeclaration") {
                {str, Json} props = statementMap["members"]?.mapValue() ?? <str, Json>{};
                foreach (str name, Json member in props) {
                    str typeDef = member.mapValue()["type_def"]?.stringValue() ?? "unknown";
                    str displayName = "{typeDef} {name}";
                    if (typeDef.indexOf("fun") == 0) {
                        displayName = typeDef;
                    }

                    declaration.subDeclarations[name] =
                        Declaration.init(
                            declarationType: "member",
                            typeDef: displayName,
                            docblock: member.mapValue()["docblock"]?.string,
                        );
                }
            }

            declarations.append(declaration);
        }
    }

    return declarations;
}

fun getDeclarations(str path) > [Declaration] {
    File file = File.open(path, mode: FileMode.read);

    str source = ast(file.readAll(), scriptName: path.sub(0, len: path.indexOf(".buzz")!));
    file.close();

    {str, Json} root = Json.decode(source).mapValue();

    | Root must be a function
    assert(root["node"]?.string == "Function", message: "Expected root node to be a function");

    return extractDeclarations(root["body"]?.mapValue()["statements"]?.listValue() ?? <Json>[]);
}

fun genHtmlDoc([Declaration] declarations) > str {
    str out = "";
    foreach (num i, Declaration decl in declarations) {
        out = "{out}{decl.gen()}";
    }

    return out;
}

fun genMarkdownDoc([Declaration] declarations) > str {
    str out = "";
    foreach (num i, Declaration decl in declarations) {
        out = "{out}{decl.toMarkdown()}";
    }

    return out;
}

fun main([str] args) > void {
    {str, str} doc = <str, str>{};
    {str, str} markdownDoc = <str, str>{};
    foreach (num i, str file in list("lib")) {
        if (file.endsWith(".buzz")) {
            [Declaration] declarations = getDeclarations("lib/{file}");

            doc[file] = genHtmlDoc(declarations);
            markdownDoc[file] = genMarkdownDoc(declarations);
        }
    }
    
    File file = File.open("{currentDirectory()}/doc/index.html", mode: FileMode.write);

    file.write(
        "<!DOCTYPE html>"
        + "<head>"
        + "<link rel=\"stylesheet\" href=\"style.css\" />"
        + "</head>"
        + "<html><body>"
    );

    file.write("<ul id=\"content\">");
    foreach (str lib, str libDoc in doc) {
        const str libName = lib.sub(0, len: lib.indexOf(".buzz")!);

        file.write("<li><a href=\"#{libName}\">{libName}</a></lib>");
    }
    file.write("</ul>");

    foreach (str lib, str libDoc in doc) {
        const str libName = lib.sub(0, len: lib.indexOf(".buzz")!);
        file.write("<h1 id=\"{libName}\">{libName}</h1><a href=\"#content\">^</a>{libDoc}");
    }
    file.write("</body></html>");

    file.close();

    File mdFile = File.open("{currentDirectory()}/doc/index.md", mode: FileMode.write);

    foreach (str lib, str libDoc in markdownDoc) {
        const str libName = lib.sub(0, len: lib.indexOf(".buzz")!);
        mdFile.write("\n# {libName}\n{libDoc}");
    }

    mdFile.close();
}