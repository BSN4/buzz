import "lib/std";
import "lib/debug";
import "lib/json";
import "lib/io";
import "lib/fs";
import "lib/errors";
import "lib/buffer";

object Declaration {
    str declarationType,
    str? name = null,
    str typeDef,
    str? docblock,

    {str, Declaration} subDeclarations,

    static fun init(
        str declarationType,
        str typeDef,
        str? docblock,
        {str, Declaration}? subDeclarations
    ) > Declaration -> Declaration{
        declarationType = declarationType,
        typeDef = typeDef,
        docblock = docblock,
        subDeclarations = subDeclarations ?? {<str, Declaration>},
    }

    | Split docblock by @ instructions
    static fun handleDocblock(str docblock) > {str, str} {
        const pat atPattern = _@([^@ ]+)(\s+[^\n@]+)?_;
        {str, str} out = {<str, str>};

        foreach (num i, str line in docblock.split("\n")) {
            [str]? at = atPattern.match(line);

            if (at != null) {
                if (at!.len() > 2) {
                    out[at![1]] = at![2];
                } else {
                    out[at![1]] = "";
                }
            } else {
                out["unspecified"] = (out["unspecified"] ?? "") + line;
            }
        }

        return out;
    }

    fun toMarkdown(str? heading) > str {
        const pat atParamPattern = _([^\s]+)\s+(.+)_;

        str out = "\n{heading ?? "###"} `{this.name ?? ""} {this.typeDef}`\n";

        if (this.docblock == null) {
            return out;
        }

        {str, str} processed = Declaration.handleDocblock(this.docblock!);

        | Ignore things marked with @private
        if (processed["private"] != null) {
            return "";
        }

        out = out + (processed["unspecified"] ?? "");

        foreach (str instruction, str content in processed) {
            if (instruction == "param") {
                [str]? param = atParamPattern.match(content);

                out = out + "\n- ";
                if (param != null) {
                    out = "{out}**`{param![1]}`:** {param![2]}\n";
                } else {
                    out = "{out}{content}\n";
                }
            } else if (instruction == "return") {
                out = "{out}\n\n**Returns:** {content}";
            }
        }

        foreach (str key, Declaration decl in this.subDeclarations) {
            out = "{out}\n{decl.toMarkdown("####")}";
        }

        return out;
    }
}

fun extractDeclarations([Json] statements) > [Declaration] !> JsonParseError {
    [Declaration] declarations = [<Declaration>];

    foreach (num index, Json statement in statements) {
        {str, Json} statementMap = statement.mapValue();
        str nodeType = statement.q(["node"]).stringValue();

        if (
            nodeType == "Function"
            or nodeType == "VarDeclaration"
            or nodeType == "FunDeclaration"
            or nodeType == "Enum"
            or nodeType == "ObjectDeclaration"
        ) {
            Declaration declaration = Declaration.init(
                declarationType: nodeType,
                typeDef: statement.q(["type_def"]).stringValue(),
                docblock: statement.q(["docblock"]).string,
            );

            if (nodeType == "VarDeclaration") {
                declaration.name = statement.q(["name"]).string;
            }

            if (nodeType == "ObjectDeclaration") {
                {str, Json} props = statement.q(["members"]).mapValue();
                foreach (str name, Json member in props) {
                    str typeDef = member.q(["type_def"]).stringValue();
                    str displayName = "{typeDef} {name}";
                    if (typeDef.indexOf("fun") == 0) {
                        displayName = typeDef;
                    }

                    declaration.subDeclarations[name] =
                        Declaration.init(
                            declarationType: "member",
                            typeDef: displayName,
                            docblock: member.mapValue()["docblock"]?.string,
                        );
                }
            }

            declarations.append(declaration);
        }
    }

    return declarations;
}

fun getDeclarations(str path) > [Declaration] 
    !> FileNotFoundError,
       AssertError,
       FileSystemError,
       UnexpectedError,
       ReadWriteError,
       CompileError,
       JsonParseError,
       WriteWhileReadingError {
    File file = File.open(path, mode: FileMode.read);

    str source = ast(
        file.readAll(),
        scriptName: path.sub(0, len: path.indexOf(".buzz")!)
    );
    file.close();

    Json? root = null;

    try {
        root = Json.decode(source);
    } catch (JsonParseError error) {
        print(path);
        | print(source);

        throw error;
    }

    | Root must be a function
    assert(root!.q(["node"]).string == "Function", message: "Expected root node to be a function");

    return extractDeclarations(root!.q(["body", "statements"]).listValue());
}

fun genMarkdownDoc([Declaration] declarations) > str {
    str out = "";
    foreach (num i, Declaration decl in declarations) {
        out = "{out}{decl.toMarkdown("###")}";
    }

    return out;
}

fun main([str] args) > void
    !> FileSystemError,
       FileNotFoundError,
       AssertError,
       ReadWriteError,
       InvalidArgumentError,
       UnexpectedError,
       CompileError,
       JsonParseError,
       WriteWhileReadingError
{
    {str, str} markdownDoc = {<str, str>};
    foreach (num i, str file in list("lib")) {
        if (file.endsWith(".buzz")) {
            [Declaration] declarations = getDeclarations("lib/{file}");

            markdownDoc[file] = genMarkdownDoc(declarations);
        }
    }

    File mdFile = File.open("{currentDirectory()}/doc/std.md", mode: FileMode.write);

    mdFile.write("# Buzz std lib\n## Table of contents\n");
    foreach (str lib, str libDoc in markdownDoc) {
        const str libName = lib.sub(0, len: lib.indexOf(".buzz")!);
        mdFile.write("\n- [{libName}](#{libName.replace(" ", with: "-")})");
    }

    foreach (str lib, str libDoc in markdownDoc) {
        const str libName = lib.sub(0, len: lib.indexOf(".buzz")!);
        mdFile.write("\n## {libName}\n{libDoc}");
    }

    mdFile.close();
}